<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，默认是OFF,当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval="30"  :间隔秒数,自动检测配置文件的变更和重新配置本身-->
<configuration status="off" monitorInterval="10">
	<!--自定义一些常量，之后使用${变量名}引用-->
	<Properties>
		<Property name="LOG.PATH">D:/log/log4j2</Property>
		<Property name="LOG.FILE.TEMP.NAME">temp.log</Property>
		<!--[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n-->
		<!--<property name="CONSOLE.LOG.PATTERN" value="[%style{%d{yyyy-MM-dd HH:mm:ss:SSS}}{bright,green}][%highlight{%p}][%style{%t}{bright,blue}][%style{%C}{bright,yellow}]: %msg%n%style{%throwable}{red}" />-->
		<property name="CONSOLE.LOG.PATTERN" value="[%style{%d{yyyy-MM-dd HH:mm:ss:SSS}}{bright,green}][%highlight{%p}][%style{%t}{bright,blue}][%style{%C}{bright,yellow}]: %style{%msg}{bright,cyan}%n%style{%throwable}{bright,red}" />
		<property name="MAX_LOG_FILE_SIZE">100MB</property>
	</Properties>
	<!--appenders:定义输出内容,输出格式,输出方式,日志保存策略等,常用其下三种标签[console,File,RollingFile]-->
	<appenders>
		<!--console输出控制台的配置-->
		<console name="Console" target="SYSTEM_OUT">
			<!--输出日志的格式-->
			<PatternLayout pattern="${CONSOLE.LOG.PATTERN}" disableAnsi="false" noConsoleNoAnsi="false"/>
		</console>

		<!--File :同步输出日志到本地文件-->
		<!--append="false" :根据其下日志策略,每次清空文件重新输入日志,可用于测试-->
		<!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
		<File name="templog" fileName="${LOG.PATH}/${LOG.FILE.TEMP.NAME}" append="false">
			<PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
		</File>

		<!--SMTP :邮件发送日志-->
		<SMTP name="Mail" subject="****SaaS系统正式版异常信息" to="message@message.info" from="message@lengjing.info" smtpUsername="message@message.info" smtpPassword="LENG****1234" smtpHost="mail.lengjing.info" smtpDebug="false" smtpPort="25" bufferSize="10">
			<PatternLayout pattern="[%-5p]:%d{YYYY-MM-dd HH:mm:ss} [%t] %c{1}:%L - %msg%n" />
		</SMTP>

		<!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
		<!-- ${sys:user.home} :项目路径 		${sys:user.home}/logs/info.log-->
		<RollingFile name="RollingFileDebug" fileName="${LOG.PATH}/log_debug.log"
					 filePattern="${LOG.PATH}/$${date:yyyy-MM}/debug-%d{yyyy-MM-dd}-%i.log">
			<!--ThresholdFilter :日志输出过滤-->
			<!--level="debug" :日志级别,onMatch="ACCEPT" :级别在debug之上则接受,onMismatch="DENY" :级别在debug之下则拒绝-->
			<ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
			<!-- Policies :日志滚动策略-->
			<Policies>
				<!-- TimeBasedTriggeringPolicy :时间滚动策略,默认0点小时产生新的文件,interval="6" : 自定义文件滚动时间间隔,每隔6小时产生新文件, modulate="true" : 产生文件是否以0点偏移时间,即6点,12点,18点,0点-->
				<TimeBasedTriggeringPolicy/>
				<!-- SizeBasedTriggeringPolicy :文件大小滚动策略-->
				<SizeBasedTriggeringPolicy size="${MAX_LOG_FILE_SIZE}"/>
			</Policies>
		</RollingFile>
		<RollingFile name="RollingFileInfo" fileName="${LOG.PATH}/log_info.log"
								   filePattern="${LOG.PATH}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
		<!--ThresholdFilter :日志输出过滤-->
		<!--level="info" :日志级别,onMatch="ACCEPT" :级别在info之上则接受,onMismatch="DENY" :级别在info之下则拒绝-->
		<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
		<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
		<!-- Policies :日志滚动策略-->
		<Policies>
			<!-- TimeBasedTriggeringPolicy :时间滚动策略,默认0点小时产生新的文件,interval="6" : 自定义文件滚动时间间隔,每隔6小时产生新文件, modulate="true" : 产生文件是否以0点偏移时间,即6点,12点,18点,0点-->
			<TimeBasedTriggeringPolicy/>
			<!-- SizeBasedTriggeringPolicy :文件大小滚动策略-->
			<SizeBasedTriggeringPolicy size="${MAX_LOG_FILE_SIZE}"/>
		</Policies>
		</RollingFile>
		<RollingFile name="RollingFileWarn" fileName="${LOG.PATH}/log_warn.log"
					 filePattern="${LOG.PATH}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
			<ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
			<Policies>
				<TimeBasedTriggeringPolicy/>
				<SizeBasedTriggeringPolicy size="${MAX_LOG_FILE_SIZE}"/>
			</Policies>
			<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
			<DefaultRolloverStrategy max="20"/>
		</RollingFile>
		<RollingFile name="RollingFileError" fileName="${LOG.PATH}/log_error.log"
					 filePattern="${LOG.PATH}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
			<ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
			<Policies>
				<TimeBasedTriggeringPolicy/>
				<SizeBasedTriggeringPolicy size="${MAX_LOG_FILE_SIZE}"/>
			</Policies>
		</RollingFile>
	</appenders>
	<!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
	<loggers>
		<!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
		<!--Logger节点用来单独指定日志的形式，name为包路径,比如要为org.springframework包下所有日志指定为INFO级别等。 -->
		<logger name="org.springframework" level="INFO"></logger>
		<logger name="org.mybatis" level="INFO"></logger>
		<!-- Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出 -->
		<root level="all">
			<appender-ref ref="Console"/>
			<appender-ref ref="templog"/>
			<appender-ref ref="RollingFileDebug"/>
			<appender-ref ref="RollingFileInfo"/>
			<appender-ref ref="RollingFileWarn"/>
			<appender-ref ref="RollingFileError"/>
		</root>
		<!--AsyncLogger :异步日志,LOG4J有三种日志模式,全异步日志,混合模式,同步日志,性能从高到底,线程越多效率越高,也可以避免日志卡死线程情况发生-->
		<!--additivity="false" : additivity设置事件是否在root logger输出，为了避免重复输出，可以在Logger 标签下设置additivity为”false”-->
		<AsyncLogger name="AsyncLogger" level="trace" includeLocation="true" additivity="false">
			<appender-ref ref="RollingFileError"/>
		</AsyncLogger>
	</loggers>
</configuration>